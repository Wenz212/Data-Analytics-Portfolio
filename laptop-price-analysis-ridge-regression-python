# Laptop Price Analysis & Ridge Regression

A compact, end-to-end data analytics project that cleans a laptop dataset, explores key drivers of price, and builds a polynomial Ridge regression model to quantify feature importance and generalization performance.

> **Tech stack:** Python (pandas, NumPy, scikit-learn), Matplotlib, Seaborn


##  Goals
- Clean and structure raw laptop data (handle types, missing values, outliers).  
- Explore price drivers: **CPU, RAM, storage, cores, OS, GPU, category**.  
- Build a baseline linear model, then a **PolynomialFeatures + Ridge** model.  
- Tune regularization (`alpha`) with cross-validation; plot train/validation R² vs `alpha`.  
- Communicate insights with clean visuals.  

---

##  Dataset
- **`laptops.csv`** — tabular data with columns like:
  - `Price` *(target)*  
  - `CPU_frequency`, `RAM_GB`, `Storage_GB_SSD`, `CPU_core`, `OS`, `GPU`, `Category` *(features)*  
- You can replace with your own file as long as these columns (or equivalent) exist.  
- Place the CSV in the project root or update the path inside the notebook.  

---

##  Quickstart
```bash
# Install dependencies
pip install -U pip
pip install pandas numpy scikit-learn matplotlib seaborn

Results (TL;DR)
	•	CPU_frequency and RAM_GB are typically strong positive drivers of price.
	•	Storage_GB_SSD and CPU_core also play a role.
	•	Polynomial + Ridge improves generalization compared to plain linear regression.
	•	Tuning alpha demonstrates the bias–variance trade-off:
	•	small alpha → may overfit
	•	moderate alpha → best validation R²

(Exact numbers will vary depending on the train/test split. Check the “Model Evaluation” section in the notebook for your run’s metrics and plots.)

⸻

Notes
	•	Categorical columns (OS, GPU, Category) are one-hot encoded.
	•	The notebook is written as a standalone project (not tied to course scaffolding).
	•	If you swap in a different dataset, adjust FEATURE_COLS and preprocessing accordingly.

⸻

Next Steps
	•	Add feature selection/regularization comparisons (Lasso, ElasticNet).
	•	Try non-linear models (RandomForest, XGBoost) for robustness.
	•	Build a simple Streamlit app to predict laptop prices from user input.
